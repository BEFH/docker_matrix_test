name: Check Container Digest Test

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: false
        default: 'warning'
      tags:
        description: 'Manual trigger'  

jobs:
  check-digest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ['stable', 'stable-tensorrt', 'stable-standard-arm64']
    outputs:
      stable: ${{ steps.compare.outputs.stable }}
      stable-tensorrt: ${{ steps.compare.outputs.stable-tensorrt }}
      stable-standard-arm64: ${{ steps.compare.outputs.stable-standard-arm64 }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get current digest
      id: digest
      run: |
        if [[ ${{ matrix.image }} == 'stable-standard-arm64' ]]; then
          arch=arm64
        else
          arch=amd64
        fi
        dg=$(skopeo inspect docker://ghcr.io/blakeblackshear/frigate:${{ matrix.image }} --override-arch=$arch --override-os=linux | jq -r '.Digest')
        echo "current_digest=$dg" >> $GITHUB_OUTPUT

    - name: Compare digests
      id: compare
      run: |
        digest_file="upstream_digests.txt"
        tag=${{ matrix.image }}
        new_digest=${{ steps.digest.outputs.current_digest }}

        # Read previous digest from file
        if [ -f "$digest_file" ]; then
          old_digest=$(grep "^$tag=" "$digest_file" | cut -d '=' -f2)
          if [ "$old_digest" != "$new_digest" ]; then
            echo "Digest changed for $tag"
            stat=changed
          else
            stat=unchanged
          fi
        else
          echo "First run or $digest_file file not found"
          stat=new
        fi
        echo "${tag}=${new_digest}=${stat}" >> $GITHUB_OUTPUT

  aggregate-results:
    needs: check-digest
    runs-on: ubuntu-latest
    outputs:
      changed_tags: ${{ steps.aggregate.outputs.changed_tags }}
      changed_digests: ${{ steps.aggregate.outputs.changed_digests }}
      changed_map: ${{ steps.aggregate.outputs.changed_map }}
      n_changed: ${{ steps.aggregate.outputs.n_changed }}
    steps:
    - name: Aggregate changed tags and digests
      id: aggregate
      run: |
        dcheck='${{ toJSON(needs.check-digest.outputs) }}'

        dcheck_changed=$(echo "$dcheck" | \
          jq -r 'to_entries | map(select(.value | split("=")[1] == "changed" or split("=")[1] == "new"))')

        changed_tags=$(echo "$dcheck_changed" | jq -r 'map(.key) | @json')
        changed_digests=$(echo "$dcheck_changed" | jq -r 'map(.value | split("=")[0]) | @json')
        n_changed=$(echo "$changed_tags" | jq 'length')

        echo "changed_tags=$changed_tags" >> $GITHUB_OUTPUT
        echo "changed_digests=$changed_digests" >> $GITHUB_OUTPUT
        echo "n_changed=$n_changed" >> $GITHUB_OUTPUT
        echo $dcheck_changed | \
          jq '{include: map({tag: .key, digest: (.value | split("=")[0])})} | @json' | \
          sed 's/^/changed_map=/' >> $GITHUB_OUTPUT
        #echo "changed_map={\"include\":[{\"tag\":\"foo\",\"digest\":\"Debug\"},{\"tag\":\"bar\",\"digest\":\"Release\"}]}" >> $GITHUB_OUTPUT


  publish-digest:
    needs: aggregate-results
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.aggregate-results.outputs.changed_map) }}
    steps:
    - name: test
      run: |
        echo ${{ matrix.tag }}
        echo ${{ matrix.digest }}